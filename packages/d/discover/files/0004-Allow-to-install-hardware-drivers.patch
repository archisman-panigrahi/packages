From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Fabio Forni <development@redaril.me>
Date: Wed, 5 Jun 2024 15:39:19 -0500
Subject: [PATCH 4/6] Allow to install hardware drivers

---
 libdiscover/Category/Category.cpp             | 10 +++++++--
 libdiscover/Category/Category.h               |  8 ++++++-
 libdiscover/appstream/AppStreamUtils.cpp      |  9 ++++++--
 .../backends/KNSBackend/KNSBackend.cpp        | 14 +++++++-----
 .../AppPackageKitResource.cpp                 | 14 ++++++++++++
 .../packagekit-backend-categories.xml         | 22 +++++++++++++++++++
 6 files changed, 67 insertions(+), 10 deletions(-)

diff --git a/libdiscover/Category/Category.cpp b/libdiscover/Category/Category.cpp
index 56ba34228..7c414000f 100644
--- a/libdiscover/Category/Category.cpp
+++ b/libdiscover/Category/Category.cpp
@@ -73,7 +73,8 @@ Category::Category(const QString &name,
                    const CategoryFilter &filter,
                    const QSet<QString> &pluginName,
                    const QList<std::shared_ptr<Category>> &subCategories,
-                   bool isAddons)
+                   bool isAddons,
+                   bool isDrivers)
     : QObject(nullptr)
     , m_name(name)
     , m_iconString(iconName)
@@ -81,7 +82,8 @@ Category::Category(const QString &name,
     , m_subCategories(subCategories)
     , m_plugins(pluginName)
     , m_isAddons(isAddons)
-    , m_priority(isAddons ? 5 : 0)
+    , m_isDrivers(isDrivers)
+    , m_priority(isAddons || isDrivers ? 5 : 0)
 {
     setObjectName(m_name);
 
@@ -122,6 +124,10 @@ void Category::parseData(const QString &path, QXmlStreamReader *xml, Localizatio
             xml->readNext();
         } else if (xml->name() == QLatin1String("OnlyShowIn")) {
             m_visible = qEnvironmentVariable("XDG_CURRENT_DESKTOP") == xml->readElementText();
+        } else if (xml->name() == QLatin1String("Drivers")) {
+            m_isDrivers = true;
+            m_priority = 5;
+            xml->readNext();
         } else if (xml->name() == QLatin1String("Icon")) {
             m_iconString = xml->readElementText();
         } else if (xml->name() == QLatin1String("Include") || xml->name() == QLatin1String("Categories")) {
diff --git a/libdiscover/Category/Category.h b/libdiscover/Category/Category.h
index e94cda03a..41e362725 100644
--- a/libdiscover/Category/Category.h
+++ b/libdiscover/Category/Category.h
@@ -68,7 +68,8 @@ public:
              const CategoryFilter &filters,
              const QSet<QString> &pluginName,
              const QList<std::shared_ptr<Category>> &subCategories,
-             bool isAddons);
+             bool isAddons,
+             bool isDrivers);
     ~Category() override;
 
     QString name() const;
@@ -95,6 +96,10 @@ public:
     {
         return m_isAddons;
     }
+    bool isDrivers() const
+    {
+        return m_isDrivers;
+    }
     qint8 priority() const
     {
         return m_priority;
@@ -149,6 +154,7 @@ private:
     CategoryFilter parseIncludes(QXmlStreamReader *xml);
     QSet<QString> m_plugins;
     bool m_isAddons = false;
+    bool m_isDrivers = false;
     qint8 m_priority = 0;
     QTimer *m_subCategoriesChanged;
     bool m_visible = true;
diff --git a/libdiscover/appstream/AppStreamUtils.cpp b/libdiscover/appstream/AppStreamUtils.cpp
index b874ba8e5..83ed3701b 100644
--- a/libdiscover/appstream/AppStreamUtils.cpp
+++ b/libdiscover/appstream/AppStreamUtils.cpp
@@ -7,6 +7,7 @@
 #include "AppStreamUtils.h"
 
 #include "utils.h"
+#include <AppStreamQt/category.h>
 #include <AppStreamQt/pool.h>
 #include <AppStreamQt/release.h>
 #include <AppStreamQt/screenshot.h>
@@ -204,8 +205,12 @@ AppStreamUtils::componentsByCategoriesTask(AppStream::ConcurrentPool *pool, cons
     const auto categories = cat->involvedCategories();
     QList<QFuture<AppStream::ComponentBox>> futures;
     futures.reserve(categories.size());
-    for (const auto &categoryName : categories) {
-        futures += pool->componentsByCategories({categoryName});
+    if (cat->isDrivers()) {
+        futures += pool->componentsByKind(AppStream::Component::KindDriver);
+    } else {
+        for (const auto &categoryName : categories) {
+            futures += pool->componentsByCategories({categoryName});
+        }
     }
 
     if (futures.size() == 1) {
diff --git a/libdiscover/backends/KNSBackend/KNSBackend.cpp b/libdiscover/backends/KNSBackend/KNSBackend.cpp
index b3a924a3f..09ac479a7 100644
--- a/libdiscover/backends/KNSBackend/KNSBackend.cpp
+++ b/libdiscover/backends/KNSBackend/KNSBackend.cpp
@@ -213,14 +213,16 @@ KNSBackend::KNSBackend(QObject *parent, const QString &iconName, const QString &
                                                          CategoryFilter{CategoryFilter::CategoryNameFilter, cat},
                                                          backendName,
                                                          QList<std::shared_ptr<Category>>{},
-                                                         true);
+                                                         true,
+                                                         false);
             else
                 categories << std::make_shared<Category>(cat,
                                                          QStringLiteral("plasma"),
                                                          CategoryFilter{CategoryFilter::CategoryNameFilter, cat},
                                                          backendName,
                                                          QList<std::shared_ptr<Category>>{},
-                                                         true);
+                                                         true,
+                                                         false);
         }
     }
 
@@ -254,12 +256,13 @@ KNSBackend::KNSBackend(QObject *parent, const QString &iconName, const QString &
     m_engine->init(m_name);
 
     if (m_hasApplications) {
-        auto actualCategory = std::make_shared<Category>(m_displayName, QStringLiteral("applications-other"), filter, backendName, topCategories, false);
+        auto actualCategory = std::make_shared<Category>(m_displayName, QStringLiteral("applications-other"), filter, backendName, topCategories, false, false);
         std::shared_ptr<Category> applicationCategory = std::make_shared<Category>(i18n("Applications"), //
                                                                                    QStringLiteral("applications-internet"),
                                                                                    filter,
                                                                                    backendName,
                                                                                    QList<std::shared_ptr<Category>>{actualCategory},
+                                                                                   false,
                                                                                    false);
         const QList<CategoryFilter> filters = {{CategoryFilter::CategoryNameFilter, QLatin1String("Application")}, filter};
         applicationCategory->setFilter({CategoryFilter::AndFilter, filters});
@@ -282,10 +285,11 @@ KNSBackend::KNSBackend(QObject *parent, const QString &iconName, const QString &
         m_engine->setTagFilter(tagFilter);
     } else {
         const auto iconName = isPlasmaCategory ? QStringLiteral("plasma") : QStringLiteral("applications-other");
-        auto actualCategory = std::make_shared<Category>(m_displayName, iconName, filter, backendName, categories, true);
+        auto actualCategory = std::make_shared<Category>(m_displayName, iconName, filter, backendName, categories, true, false);
 
         const auto topLevelName = isPlasmaCategory ? i18n("Plasma Addons") : i18n("Application Addons");
-        auto addonsCategory = std::make_shared<Category>(topLevelName, iconName, filter, backendName, QList<std::shared_ptr<Category>>{actualCategory}, true);
+        auto addonsCategory =
+            std::make_shared<Category>(topLevelName, iconName, filter, backendName, QList<std::shared_ptr<Category>>{actualCategory}, true, false);
         m_rootCategories = {addonsCategory};
     }
 
diff --git a/libdiscover/backends/PackageKitBackend/AppPackageKitResource.cpp b/libdiscover/backends/PackageKitBackend/AppPackageKitResource.cpp
index a6de172aa..f04434053 100644
--- a/libdiscover/backends/PackageKitBackend/AppPackageKitResource.cpp
+++ b/libdiscover/backends/PackageKitBackend/AppPackageKitResource.cpp
@@ -9,8 +9,10 @@
 #include <AppStreamQt/developer.h>
 #include <AppStreamQt/icon.h>
 #include <AppStreamQt/image.h>
+#include <AppStreamQt/provided.h>
 #include <AppStreamQt/release.h>
 #include <AppStreamQt/screenshot.h>
+#include <AppStreamQt/systeminfo.h>
 #include <AppStreamQt/version.h>
 #include <KLocalizedString>
 #include <KService>
@@ -114,6 +116,18 @@ QStringList AppPackageKitResource::mimetypes() const
 
 static constexpr auto s_addonKinds = {AppStream::Component::KindAddon, AppStream::Component::KindCodec};
 
+static bool hasDeviceModaliases(const AppStream::Component &comp)
+{
+    const auto mods = comp.provided(AppStream::Provided::KindModalias);
+    auto sys = AppStream::SystemInfo();
+    for (const auto &mod : mods.items()) {
+        if (sys.hasDeviceMatchingModalias(mod)) {
+            return true;
+        }
+    }
+    return false;
+}
+
 bool AppPackageKitResource::hasCategory(const QString &category) const
 {
     if (m_appdata.kind() != AppStream::Component::KindAddon && category == QStringLiteral("Application"))
diff --git a/libdiscover/backends/PackageKitBackend/packagekit-backend-categories.xml b/libdiscover/backends/PackageKitBackend/packagekit-backend-categories.xml
index 2dd798c8a..9ce96987b 100644
--- a/libdiscover/backends/PackageKitBackend/packagekit-backend-categories.xml
+++ b/libdiscover/backends/PackageKitBackend/packagekit-backend-categories.xml
@@ -552,6 +552,28 @@
       </Or>
     </Include>
   </Menu>
+
+  <Menu>
+    <Name>Hardware Drivers</Name>
+    <Icon>computer-laptop</Icon>
+    <Drivers />
+    <Include>
+      <And>
+        <Category>Drivers</Category>
+      </And>
+    </Include>
+    <Menu>
+      <Name>Drivers For This Device</Name>
+      <Icon>computer-laptop</Icon>
+      <Drivers />
+      <Include>
+        <And>
+          <Category>CompatibleDrivers</Category>
+        </And>
+      </Include>
+    </Menu>
+  </Menu>
+
   <Menu>
     <Name>Plasma Addons</Name>
     <Icon>plasma</Icon>
