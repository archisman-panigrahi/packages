From: Robert Ancell <robert.ancell@canonical.com>
Date: Sun, 15 Mar 2020 09:07:51 +0100
Subject: Allow fractional scaling to be enabled

---
 panels/display/cc-display-config.c  | 200 ++++++++++++++++++++++++++++++++++++
 panels/display/cc-display-config.h  |   4 +
 panels/display/cc-display-panel.blp |   9 ++
 panels/display/cc-display-panel.c   |  23 +++++
 4 files changed, 236 insertions(+)

diff --git a/panels/display/cc-display-config.c b/panels/display/cc-display-config.c
index 0da3201..9c5f1ee 100644
--- a/panels/display/cc-display-config.c
+++ b/panels/display/cc-display-config.c
@@ -17,6 +17,11 @@
  *
  */
 
+#define MUTTER_SCHEMA                     "org.gnome.mutter"
+#define MUTTER_EXPERIMENTAL_FEATURES_KEY  "experimental-features"
+#define MUTTER_FEATURE_FRACTIONAL_SCALING_WAYLAND "scale-monitor-framebuffer"
+#define MUTTER_FEATURE_FRACTIONAL_SCALING_XWAYLAND "xwayland-native-scaling"
+
 #include <gio/gio.h>
 #include <math.h>
 #include "cc-display-config.h"
@@ -160,6 +165,10 @@ struct _CcDisplayConfig
   CcDisplayMonitor *primary;
 
   GHashTable *logical_monitors;
+
+  GSettings *mutter_settings;
+  gboolean fractional_scaling;
+  gboolean fractional_scaling_pending_disable;
 };
 
 G_DEFINE_TYPE (CcDisplayMode,
@@ -511,6 +520,78 @@ cc_display_monitor_init (CcDisplayMonitor *self)
   self->max_height = G_MAXINT;
 }
 
+static gboolean
+get_fractional_scaling_active (CcDisplayConfig *self)
+{
+  return cc_display_config_is_layout_logical (self);
+}
+
+static void
+set_layout_logical (CcDisplayConfig *self,
+                    gboolean         logical)
+{
+  if (!self->supports_changing_layout_mode)
+    return;
+
+  if (!logical)
+    {
+      self->layout_mode = CC_DISPLAY_LAYOUT_MODE_PHYSICAL;
+      return;
+    }
+
+  self->layout_mode = CC_DISPLAY_LAYOUT_MODE_LOGICAL;
+}
+
+static gboolean
+scale_value_is_fractional (double scale)
+{
+  return (int) scale != scale;
+}
+
+static void
+set_fractional_scaling_active (CcDisplayConfig *self,
+                               gboolean         enable)
+{
+  g_auto(GStrv) existing_features = NULL;
+  gboolean have_fractional_scaling = FALSE;
+  gboolean have_xwayland_scaling = FALSE;
+  g_autoptr(GVariantBuilder) builder = NULL;
+
+  /* Add or remove the fractional scaling feature from mutter */
+  existing_features = g_settings_get_strv (self->mutter_settings,
+                                           MUTTER_EXPERIMENTAL_FEATURES_KEY);
+  builder = g_variant_builder_new (G_VARIANT_TYPE ("as"));
+  for (int i = 0; existing_features[i] != NULL; i++)
+    {
+      if (g_strcmp0 (existing_features[i], MUTTER_FEATURE_FRACTIONAL_SCALING_WAYLAND) == 0)
+        {
+          if (enable)
+            have_fractional_scaling = TRUE;
+          else
+            continue;
+        }
+
+      if (g_strcmp0 (existing_features[i], MUTTER_FEATURE_FRACTIONAL_SCALING_XWAYLAND) == 0)
+        {
+          if (enable)
+            have_xwayland_scaling = TRUE;
+          else
+            continue;
+        }
+
+      g_variant_builder_add (builder, "s", existing_features[i]);
+    }
+
+  if (enable && !have_fractional_scaling)
+    g_variant_builder_add (builder, "s", MUTTER_FEATURE_FRACTIONAL_SCALING_WAYLAND);
+
+  if (enable && !have_xwayland_scaling)
+    g_variant_builder_add (builder, "s", MUTTER_FEATURE_FRACTIONAL_SCALING_XWAYLAND);
+
+  g_settings_set_value (self->mutter_settings, MUTTER_EXPERIMENTAL_FEATURES_KEY,
+                        g_variant_builder_end (builder));
+}
+
 static void
 cc_display_monitor_finalize (GObject *object)
 {
@@ -1683,6 +1764,10 @@ cc_display_config_constructed (GObject *object)
     }
 
   cc_display_config_update_ui_numbers_names(self);
+
+  /* No need to connect to the setting, as we'll get notified by mutter */
+  self->mutter_settings = g_settings_new (MUTTER_SCHEMA);
+  self->fractional_scaling = get_fractional_scaling_active (self);
 }
 
 static void
@@ -1760,6 +1845,8 @@ cc_display_config_finalize (GObject *object)
   g_clear_list (&self->monitors, g_object_unref);
   g_clear_pointer (&self->logical_monitors, g_hash_table_destroy);
 
+  g_clear_object (&self->mutter_settings);
+
   G_OBJECT_CLASS (cc_display_config_parent_class)->finalize (object);
 }
 
@@ -1972,6 +2059,12 @@ config_apply (CcDisplayConfig        *self,
 
   cc_display_config_ensure_non_offset_coords (self);
 
+  if (self->fractional_scaling_pending_disable)
+    {
+      set_fractional_scaling_active (self, FALSE);
+      self->fractional_scaling_pending_disable = FALSE;
+    }
+
   retval = g_dbus_proxy_call_sync (self->proxy,
                                    "ApplyMonitorsConfig",
                                    build_apply_parameters (self, method),
@@ -2043,6 +2136,13 @@ cc_display_config_equal (CcDisplayConfig *self,
   g_return_val_if_fail (CC_IS_DISPLAY_CONFIG (self), FALSE);
   g_return_val_if_fail (CC_IS_DISPLAY_CONFIG (other), FALSE);
 
+  if (self->fractional_scaling_pending_disable !=
+      other->fractional_scaling_pending_disable)
+    return FALSE;
+
+  if (self->layout_mode != other->layout_mode)
+    return FALSE;
+
   cc_display_config_ensure_non_offset_coords (self);
   cc_display_config_ensure_non_offset_coords (other);
 
@@ -2356,6 +2456,9 @@ cc_display_config_is_scaled_mode_valid (CcDisplayConfig *self,
   g_return_val_if_fail (CC_IS_DISPLAY_CONFIG (self), FALSE);
   g_return_val_if_fail (CC_IS_DISPLAY_MODE (mode), FALSE);
 
+  if (self->fractional_scaling_pending_disable && scale_value_is_fractional (scale))
+    return FALSE;
+
   if (cc_display_config_is_cloning (self))
     return is_scale_allowed_by_active_monitors (self, mode, scale);
 
@@ -2394,3 +2497,100 @@ cc_display_config_update_ui_numbers_names (CcDisplayConfig *self)
       cc_display_monitor_set_ui_info (monitor, current_ui_number, ui_name);
     }
 }
+
+static gboolean
+set_monitors_scaling_to_preferred_integers (CcDisplayConfig *self)
+{
+  GList *l;
+  gboolean any_changed = FALSE;
+
+  for (l = cc_display_config_get_monitors (self); l; l = l->next)
+    {
+      CcDisplayMonitor *monitor = l->data;
+      gdouble monitor_scale = cc_display_monitor_get_scale (monitor);
+
+      if (scale_value_is_fractional (monitor_scale))
+        {
+          CcDisplayMode *preferred_mode;
+          double preferred_scale;
+          double *saved_scale;
+
+          preferred_mode = cc_display_monitor_get_preferred_mode (monitor);
+          preferred_scale = cc_display_mode_get_preferred_scale (preferred_mode);
+          cc_display_monitor_set_scale (monitor, preferred_scale);
+          any_changed = TRUE;
+
+          saved_scale = g_new (double, 1);
+          *saved_scale = monitor_scale;
+          g_object_set_data_full (G_OBJECT (monitor),
+                                  "previous-fractional-scale",
+                                  saved_scale, g_free);
+        }
+      else
+        {
+          g_signal_emit_by_name (monitor, "scale");
+        }
+    }
+
+  return any_changed;
+}
+
+static void
+reset_monitors_scaling_to_selected_values (CcDisplayConfig *self)
+{
+  GList *l;
+
+  for (l = cc_display_config_get_monitors (self); l; l = l->next)
+    {
+      CcDisplayMonitor *monitor = l->data;
+      gdouble *saved_scale;
+
+      saved_scale = g_object_get_data (G_OBJECT (monitor),
+                                       "previous-fractional-scale");
+
+      if (saved_scale)
+        {
+          cc_display_monitor_set_scale (monitor, *saved_scale);
+          g_object_set_data (G_OBJECT (monitor), "previous-fractional-scale", NULL);
+        }
+      else
+        {
+          g_signal_emit_by_name (monitor, "scale");
+        }
+    }
+}
+
+void
+cc_display_config_set_fractional_scaling (CcDisplayConfig *self,
+                                          gboolean         enabled)
+{
+  if (self->fractional_scaling == enabled)
+    return;
+
+  self->fractional_scaling = enabled;
+
+  set_layout_logical (self, enabled);
+
+  if (self->fractional_scaling)
+    {
+      if (self->fractional_scaling_pending_disable)
+        {
+          self->fractional_scaling_pending_disable = FALSE;
+          reset_monitors_scaling_to_selected_values (self);
+        }
+
+      if (!get_fractional_scaling_active (self))
+        set_fractional_scaling_active (self, enabled);
+    }
+  else
+    {
+      self->fractional_scaling_pending_disable = TRUE;
+      set_monitors_scaling_to_preferred_integers (self);
+    }
+}
+
+gboolean
+cc_display_config_get_fractional_scaling (CcDisplayConfig *self)
+{
+  return self->fractional_scaling;
+}
diff --git a/panels/display/cc-display-config.h b/panels/display/cc-display-config.h
index 91251d6..23cb90a 100644
--- a/panels/display/cc-display-config.h
+++ b/panels/display/cc-display-config.h
@@ -128,6 +128,10 @@ gboolean          cc_display_config_get_panel_orientation_managed
                                                             (CcDisplayConfig    *self);
 void              cc_display_config_update_ui_numbers_names (CcDisplayConfig    *self);
 
+void              cc_display_config_set_fractional_scaling  (CcDisplayConfig    *self,
+                                                             gboolean            enabled);
+gboolean          cc_display_config_get_fractional_scaling  (CcDisplayConfig    *self);
+
 const char*       cc_display_monitor_get_display_name       (CcDisplayMonitor   *monitor);
 gboolean          cc_display_monitor_is_active              (CcDisplayMonitor   *monitor);
 void              cc_display_monitor_set_active             (CcDisplayMonitor   *monitor,
diff --git a/panels/display/cc-display-panel.blp b/panels/display/cc-display-panel.blp
index f40b2cf..96ab588 100644
--- a/panels/display/cc-display-panel.blp
+++ b/panels/display/cc-display-panel.blp
@@ -107,6 +107,15 @@ template $CcDisplayPanel: $CcPanel {
           visible: false;
         }
 
+        Adw.PreferencesGroup {
+          Adw.SwitchRow scale_fractional_row {
+            title: C_("display setting", "_Fractional Scaling");
+            subtitle: C_("display setting", "May increase power usage, lower speed, or reduce display sharpness.");
+            use-underline: true;
+            notify::active => $on_scale_fractional_toggled(template);
+          }
+        }
+
         Adw.PreferencesGroup {
           $CcListRow night_light_row {
             /* Translators: This is the redshift functionality where we suppress blue light when the sun has gone down */
diff --git a/panels/display/cc-display-panel.c b/panels/display/cc-display-panel.c
index d9de82c..5cbe5bc 100644
--- a/panels/display/cc-display-panel.c
+++ b/panels/display/cc-display-panel.c
@@ -73,6 +73,8 @@ struct _CcDisplayPanel
   CcNightLightPage *night_light_page;
   CcListRow        *night_light_row;
 
+  GtkWidget        *scale_fractional_row;
+
   UpClient *up_client;
   gboolean lid_is_closed;
 
@@ -518,6 +520,19 @@ on_primary_display_selected_item_changed_cb (CcDisplayPanel *self)
   update_apply_button (self);
 }
 
+static void
+on_scale_fractional_toggled (CcDisplayPanel *self)
+{
+  gboolean active;
+
+  active = adw_switch_row_get_active (ADW_SWITCH_ROW (self->scale_fractional_row));
+
+  if (self->current_config)
+    cc_display_config_set_fractional_scaling (self->current_config, active);
+
+  update_apply_button (self);
+}
+
 static void
 on_toplevel_collapsed (CcDisplayPanel *self, GParamSpec *pspec, GtkWidget *toplevel)
 {
@@ -602,6 +617,7 @@ cc_display_panel_class_init (CcDisplayPanelClass *klass)
   gtk_widget_class_bind_template_child (widget_class, CcDisplayPanel, escape_shortcut);
   gtk_widget_class_bind_template_child (widget_class, CcDisplayPanel, night_light_page);
   gtk_widget_class_bind_template_child (widget_class, CcDisplayPanel, night_light_row);
+  gtk_widget_class_bind_template_child (widget_class, CcDisplayPanel, scale_fractional_row);
   gtk_widget_class_bind_template_child (widget_class, CcDisplayPanel, primary_display_row);
   gtk_widget_class_bind_template_child (widget_class, CcDisplayPanel, single_display_settings_group);
 
@@ -611,6 +627,7 @@ cc_display_panel_class_init (CcDisplayPanelClass *klass)
   gtk_widget_class_bind_template_callback (widget_class, on_primary_display_selected_item_changed_cb);
   gtk_widget_class_bind_template_callback (widget_class, on_screen_changed);
   gtk_widget_class_bind_template_callback (widget_class, on_toplevel_escape_pressed_cb);
+  gtk_widget_class_bind_template_callback (widget_class, on_scale_fractional_toggled);
 }
 
 static void
@@ -748,12 +765,18 @@ rebuild_ui (CcDisplayPanel *self)
       self->monitor_rows = g_list_remove_link (self->monitor_rows, self->monitor_rows);
     }
 
+  gtk_widget_set_visible (self->scale_fractional_row, self->current_config != NULL);
+
   if (!self->current_config)
     {
       self->rebuilding_counter--;
       return;
     }
 
+  g_object_set (G_OBJECT (self->scale_fractional_row), "active",
+                cc_display_config_get_fractional_scaling (self->current_config),
+                NULL);
+
   gtk_widget_set_visible (self->display_settings_disabled_group, FALSE);
 
   n_usable_outputs = 0;
